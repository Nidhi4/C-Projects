/*
 * main.c
 *
 *  Created on: 12-Jan-2020
 *      Author: user
 */

//Stacks Array

#include<stdio.h>
#include<stddef.h>
#define SIZE 5
struct stackarray
{
	int data[SIZE] ;
	int top ;
};
int push (struct stackarray *fs,int fdata) ;
int pop (struct stackarray *fs, int *fdata) ;
int displayTop(struct stackarray *fs, int *ftdata) ;
int display (struct stackarray fs) ;
int isFull (struct stackarray *fs) ;
int isEmpty (struct stackarray *fs) ;
int main (void)
{
	struct stackarray s = {{0},-1} ;
	int choice = 0 ;
	int data = 0 ;
	int tdata = 0 ;
	int flag = 0 ;
	int ddata = 0 ;

	do
	{
		do
		{
			printf("\n*************************\n") ;
			printf("Menu :") ;
			printf("\n1. Push an element") ;
			printf("\n2. Pop an element") ;
			printf("\n3. Display top element") ;
			printf("\n4. Display all elements") ;
			printf("\n0. Exit ") ;
			printf("\nYour Choice = ") ;
			scanf("%d",&choice) ;
		}while(choice<0 || choice>4) ;

		switch(choice)
		{
			case 1 :
				printf("\nEnter the data you want to push = ") ;
				scanf("%d",&data);

				flag = push(&s,data) ;
				if(flag == 1)
				{
					printf("\nStack is full. Data cannot be pushed.") ;
				}
				else
				{
					printf("\n%d pushed successfully ! \n",data) ;
				}
				break ;

			case 2 :
				flag = pop(&s,&ddata) ;
				if(flag == 1)
				{
					printf("\nStack is empty. No data to pop.") ;
				}
				else
				{
					printf("\nThe data popped is %d",ddata) ;
				}
				break ;

			case 3 :
				flag = displayTop(&s, &tdata) ;
				if(flag == 1)
				{
					printf("\nStack is empty. No data to display.") ;
				}
				else
				{
					printf("\nThe top element is %d", tdata) ;
				}
				break ;

			case 4 :
				flag = display(s) ;
				if(flag == 1)
				{
					printf("\nStack is empty. No data to display. \n") ;
				}
				break ;

			case 0 :
				printf("\nThank You !! :) ") ;
				break;
		}

	}while(choice!=0);

	return 0;
}
int isFull(struct stackarray *fs)
{
	int f = 0 ;

	if(fs->top < SIZE-1)
	{
		f = 0 ; //not full
	}
	else
	{
		f = 1 ;  //full
	}
	return f ;
}
int push(struct stackarray *fs,int fdata)
{
	int f = 0 ;
	f = isFull(fs) ;
	if(f != 1)
	{
		fs->top = fs->top + 1 ;
		fs->data[fs->top] = fdata ;
	}
	return f ;
}
int isEmpty(struct stackarray *fs)
{
	int f = 0 ;
	if(fs->top == -1)
	{
		f = 1 ;   //empty
	}
	else
	{
		f = 0 ;
	}
	return f ;
}
int displayTop(struct stackarray *fs, int *ftdata)
{
	int rval = 0 ;
	int se = 0 ;       //stack full

	se = isEmpty(fs) ;
	if (se == 1)
	{
		rval = 1 ;
	}
	else
	{
		rval = 0 ;
		*ftdata = fs->data[fs->top] ;       //top is not decremented
	}

	return rval ;
}
/*
int display(struct stackarray *fs)
{
	int i = 0 ;
	int f = 0 ;
	f = isEmpty(fs) ;

	if(f != 1)
	{
		printf("\nStack Elements = ") ;
		for(i = fs->top ; i>=0 ; i--)
		{
			printf("\n%3d",fs->data[i]) ;
		}
	}
	return f ;
}
*/
int display(struct stackarray fs)
{
	int rval = 0 ;
	int se = 0 ;
	int ps = 0 ; //pop successful
	int ddata = 0 ;
	struct stackarray t = {{0}, -1} ;

	se = isEmpty(&fs) ;

	if(se == 1)
	{
		rval = 1 ;
	}
	else
	{
		rval = 0 ;
		printf("\nStack Elements = ") ;
		do
		{
			ps = pop(&fs, &ddata) ;
			if(ps != 1)
			{
				printf("\n\t%d",ddata) ;
				push(&t, ddata) ;
			}

		}while(ps == 0) ;

		do
		{
			ps = pop(&t, &ddata) ;

			if(ps != 1)
			{
				push(&fs, ddata) ;
			}
		}while(ps == 0) ;
	}

	return rval ;

}
int pop(struct stackarray *fs, int *fdata)
{
	int f = 0 ;
	f = isEmpty(fs) ;

	if(f != 1)
	{
		*fdata = fs->data[fs->top] ;
		fs->top = fs->top-1 ;
	}

	return f ;
}
